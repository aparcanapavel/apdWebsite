/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
var NgxTwitterTimelineService = /** @class */ (function () {
    function NgxTwitterTimelineService() {
        this.TWITTER_SCRIPT_ID = 'twitter-wjs';
        this.TWITTER_WIDGET_URL = 'https://platform.twitter.com/widgets.js';
    }
    /**
     * @return {?}
     */
    NgxTwitterTimelineService.prototype.loadScript = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Observable.create((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            _this.startScriptLoad();
            window['twttr'].ready((/**
             * @param {?} twttr
             * @return {?}
             */
            function (twttr) {
                observer.next(twttr);
                observer.complete();
            }));
        }));
    };
    /**
     * @private
     * @return {?}
     */
    NgxTwitterTimelineService.prototype.startScriptLoad = /**
     * @private
     * @return {?}
     */
    function () {
        window['twttr'] = ((/**
         * @param {?} d
         * @param {?} s
         * @param {?} id
         * @param {?} url
         * @return {?}
         */
        function (d, s, id, url) {
            /** @type {?} */
            var script;
            /** @type {?} */
            var firstScriptEl = d.getElementsByTagName(s)[0];
            /** @type {?} */
            var twitterScript = window['twttr'] || {};
            if (d.getElementById(id)) {
                return twitterScript;
            }
            script = d.createElement(s);
            script.id = id;
            script.src = url;
            firstScriptEl.parentNode.insertBefore(script, firstScriptEl);
            twitterScript._e = [];
            twitterScript.ready = (/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                twitterScript._e.push(f);
            });
            return twitterScript;
        })(document, 'script', this.TWITTER_SCRIPT_ID, this.TWITTER_WIDGET_URL));
    };
    NgxTwitterTimelineService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NgxTwitterTimelineService.ctorParameters = function () { return []; };
    /** @nocollapse */ NgxTwitterTimelineService.ngInjectableDef = i0.defineInjectable({ factory: function NgxTwitterTimelineService_Factory() { return new NgxTwitterTimelineService(); }, token: NgxTwitterTimelineService, providedIn: "root" });
    return NgxTwitterTimelineService;
}());
export { NgxTwitterTimelineService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxTwitterTimelineService.prototype.TWITTER_SCRIPT_ID;
    /**
     * @type {?}
     * @private
     */
    NgxTwitterTimelineService.prototype.TWITTER_WIDGET_URL;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXR3aXR0ZXItdGltZWxpbmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC10d2l0dGVyLXRpbWVsaW5lLyIsInNvdXJjZXMiOlsibGliL25neC10d2l0dGVyLXRpbWVsaW5lLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFFbEM7SUFPRTtRQUhRLHNCQUFpQixHQUFHLGFBQWEsQ0FBQztRQUNsQyx1QkFBa0IsR0FBRyx5Q0FBeUMsQ0FBQztJQUV2RCxDQUFDOzs7O0lBRWpCLDhDQUFVOzs7SUFBVjtRQUFBLGlCQVdDO1FBVkMsT0FBTyxVQUFVLENBQUMsTUFBTTs7OztRQUFDLFVBQUEsUUFBUTtZQUUvQixLQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFFdkIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUs7Ozs7WUFBQyxVQUFDLEtBQUs7Z0JBQzFCLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3JCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN0QixDQUFDLEVBQUMsQ0FBQztRQUVMLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFTyxtREFBZTs7OztJQUF2QjtRQUNFLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDOzs7Ozs7O1FBQUEsVUFBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHOztnQkFFbkMsTUFBTTs7Z0JBQ1YsYUFBYSxHQUFHLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7O2dCQUM1QyxhQUFhLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFDckMsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUN4QixPQUFPLGFBQWEsQ0FBQzthQUN0QjtZQUVELE1BQU0sR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1lBQ2YsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7WUFDakIsYUFBYSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBRTdELGFBQWEsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1lBRXRCLGFBQWEsQ0FBQyxLQUFLOzs7O1lBQUcsVUFBUyxDQUFDO2dCQUM5QixhQUFhLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQixDQUFDLENBQUEsQ0FBQztZQUVGLE9BQU8sYUFBYSxDQUFDO1FBQ3ZCLENBQUMsRUFBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7O2dCQTdDRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7OztvQ0FMRDtDQWlEQyxBQTlDRCxJQThDQztTQTNDWSx5QkFBeUI7Ozs7OztJQUNwQyxzREFBMEM7Ozs7O0lBQzFDLHVEQUF1RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4VHdpdHRlclRpbWVsaW5lU2VydmljZSB7XG4gIHByaXZhdGUgVFdJVFRFUl9TQ1JJUFRfSUQgPSAndHdpdHRlci13anMnO1xuICBwcml2YXRlIFRXSVRURVJfV0lER0VUX1VSTCA9ICdodHRwczovL3BsYXRmb3JtLnR3aXR0ZXIuY29tL3dpZGdldHMuanMnO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgbG9hZFNjcmlwdCgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZShvYnNlcnZlciA9PiB7XG5cbiAgICAgIHRoaXMuc3RhcnRTY3JpcHRMb2FkKCk7XG5cbiAgICAgIHdpbmRvd1sndHd0dHInXS5yZWFkeSgodHd0dHIpID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dCh0d3R0cik7XG4gICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICB9KTtcblxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGFydFNjcmlwdExvYWQoKSB7XG4gICAgd2luZG93Wyd0d3R0ciddID0gKGZ1bmN0aW9uKGQsIHMsIGlkLCB1cmwpXG4gICAge1xuICAgICAgbGV0IHNjcmlwdCxcbiAgICAgIGZpcnN0U2NyaXB0RWwgPSBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdLFxuICAgICAgdHdpdHRlclNjcmlwdCA9IHdpbmRvd1sndHd0dHInXSB8fCB7fTtcbiAgICAgIGlmIChkLmdldEVsZW1lbnRCeUlkKGlkKSkge1xuICAgICAgICByZXR1cm4gdHdpdHRlclNjcmlwdDtcbiAgICAgIH1cblxuICAgICAgc2NyaXB0ID0gZC5jcmVhdGVFbGVtZW50KHMpO1xuICAgICAgc2NyaXB0LmlkID0gaWQ7XG4gICAgICBzY3JpcHQuc3JjID0gdXJsO1xuICAgICAgZmlyc3RTY3JpcHRFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIGZpcnN0U2NyaXB0RWwpO1xuXG4gICAgICB0d2l0dGVyU2NyaXB0Ll9lID0gW107XG5cbiAgICAgIHR3aXR0ZXJTY3JpcHQucmVhZHkgPSBmdW5jdGlvbihmKSB7XG4gICAgICAgIHR3aXR0ZXJTY3JpcHQuX2UucHVzaChmKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB0d2l0dGVyU2NyaXB0O1xuICAgIH0oZG9jdW1lbnQsICdzY3JpcHQnLCB0aGlzLlRXSVRURVJfU0NSSVBUX0lELCB0aGlzLlRXSVRURVJfV0lER0VUX1VSTCkpO1xuICB9XG59XG4iXX0=