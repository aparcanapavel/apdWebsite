/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Input } from '@angular/core';
import { NgxTwitterTimelineService } from './ngx-twitter-timeline.service';
var NgxTwitterTimelineComponent = /** @class */ (function () {
    function NgxTwitterTimelineComponent(element, twitterTimelineService) {
        this.element = element;
        this.twitterTimelineService = twitterTimelineService;
        this.defaultOpts = {
            tweetLimit: 5
        };
        this.defaultData = {
            sourceType: 'url',
            url: 'https://twitter.com/twitterdev',
            screenName: 'twitterdev'
        };
    }
    ;
    /**
     * @return {?}
     */
    NgxTwitterTimelineComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.data && this.data.sourceType) {
            switch (this.data.sourceType) {
                case 'url':
                    delete this.defaultData.screenName;
                    break;
                case 'profile':
                    delete this.defaultData.url;
                    break;
                default:
                    break;
            }
            this.loadTwitterWidget();
        }
    };
    /**
     * @return {?}
     */
    NgxTwitterTimelineComponent.prototype.loadTwitterWidget = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.twitterTimelineService
            .loadScript()
            .subscribe((/**
         * @param {?} twttr
         * @return {?}
         */
        function (twttr) {
            /** @type {?} */
            var nativeElement = _this.element.nativeElement;
            nativeElement.innerHTML = "";
            window['twttr']
                .widgets
                .createTimeline(tslib_1.__assign({}, _this.defaultData, _this.data), nativeElement, tslib_1.__assign({}, _this.defaultOpts, _this.opts))
                .then((/**
             * @param {?} embed
             * @return {?}
             */
            function (embed) {
                // console.log(embed);
            }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return console.error(error); }));
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return console.error(err); }));
    };
    NgxTwitterTimelineComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-twitter-timeline',
                    template: ""
                }] }
    ];
    /** @nocollapse */
    NgxTwitterTimelineComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgxTwitterTimelineService }
    ]; };
    NgxTwitterTimelineComponent.propDecorators = {
        data: [{ type: Input }],
        opts: [{ type: Input }]
    };
    return NgxTwitterTimelineComponent;
}());
export { NgxTwitterTimelineComponent };
if (false) {
    /**
     * The data source definition object for the content to be displayed in the widget.
     * May be a widget ID string for a search API timeline or legacy widget
     * @type {?}
     */
    NgxTwitterTimelineComponent.prototype.data;
    /**
     * A hash of additional options to configure the widget
     * @type {?}
     */
    NgxTwitterTimelineComponent.prototype.opts;
    /** @type {?} */
    NgxTwitterTimelineComponent.prototype.defaultOpts;
    /** @type {?} */
    NgxTwitterTimelineComponent.prototype.defaultData;
    /**
     * @type {?}
     * @private
     */
    NgxTwitterTimelineComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    NgxTwitterTimelineComponent.prototype.twitterTimelineService;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXR3aXR0ZXItdGltZWxpbmUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXR3aXR0ZXItdGltZWxpbmUvIiwic291cmNlcyI6WyJsaWIvbmd4LXR3aXR0ZXItdGltZWxpbmUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBSTNFO0lBdUJFLHFDQUNVLE9BQW1CLEVBQ25CLHNCQUFpRDtRQURqRCxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQ25CLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBMkI7UUFYM0QsZ0JBQVcsR0FBOEI7WUFDdkMsVUFBVSxFQUFFLENBQUM7U0FDZCxDQUFDO1FBQ0YsZ0JBQVcsR0FBMkI7WUFDcEMsVUFBVSxFQUFFLEtBQUs7WUFDakIsR0FBRyxFQUFFLGdDQUFnQztZQUNyQyxVQUFVLEVBQUUsWUFBWTtTQUN6QixDQUFDO0lBS0UsQ0FBQztJQVZILENBQUM7Ozs7SUFZSCxpREFBVzs7O0lBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDckMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDNUIsS0FBSyxLQUFLO29CQUNSLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUM7b0JBQ25DLE1BQU07Z0JBQ1IsS0FBSyxTQUFTO29CQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUM7b0JBQzVCLE1BQU07Z0JBQ1I7b0JBQ0UsTUFBTTthQUNUO1lBQ0QsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7U0FDMUI7SUFDSCxDQUFDOzs7O0lBRUQsdURBQWlCOzs7SUFBakI7UUFBQSxpQkFvQkM7UUFuQkMsSUFBSSxDQUFDLHNCQUFzQjthQUN4QixVQUFVLEVBQUU7YUFDWixTQUFTOzs7O1FBQ1IsVUFBQSxLQUFLOztnQkFDQyxhQUFhLEdBQUcsS0FBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhO1lBQzlDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1lBQzdCLE1BQU0sQ0FBQyxPQUFPLENBQUM7aUJBQ1osT0FBTztpQkFDUCxjQUFjLHNCQUNSLEtBQUksQ0FBQyxXQUFXLEVBQUssS0FBSSxDQUFDLElBQUksR0FDbkMsYUFBYSx1QkFDUixLQUFJLENBQUMsV0FBVyxFQUFLLEtBQUksQ0FBQyxJQUFJLEVBQ3BDO2lCQUNBLElBQUk7Ozs7WUFBQyxVQUFBLEtBQUs7Z0JBQ1Qsc0JBQXNCO1lBQ3hCLENBQUMsRUFBQztpQkFDRCxLQUFLOzs7O1lBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFwQixDQUFvQixFQUFDLENBQUE7UUFDekMsQ0FBQzs7OztRQUNELFVBQUEsR0FBRyxJQUFJLE9BQUEsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBbEIsQ0FBa0IsRUFBQyxDQUFDO0lBQ2pDLENBQUM7O2dCQWhFRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjtvQkFDaEMsUUFBUSxFQUFFLEVBQUU7aUJBQ2I7Ozs7Z0JBUm1CLFVBQVU7Z0JBQ3JCLHlCQUF5Qjs7O3VCQWEvQixLQUFLO3VCQUlMLEtBQUs7O0lBb0RSLGtDQUFDO0NBQUEsQUFqRUQsSUFpRUM7U0E3RFksMkJBQTJCOzs7Ozs7O0lBS3RDLDJDQUFzQzs7Ozs7SUFJdEMsMkNBQXlDOztJQUN6QyxrREFFRTs7SUFDRixrREFJRTs7Ozs7SUFHQSw4Q0FBMkI7Ozs7O0lBQzNCLDZEQUF5RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neFR3aXR0ZXJUaW1lbGluZVNlcnZpY2UgfSBmcm9tICcuL25neC10d2l0dGVyLXRpbWVsaW5lLnNlcnZpY2UnO1xuaW1wb3J0IE5neFR3aXR0ZXJUaW1lbGluZURhdGEgZnJvbSAnLi9uZ3gtdHdpdHRlci10aW1lbGluZS1kYXRhLmludGVyZmFjZSc7XG5pbXBvcnQgTmd4VHdpdHRlclRpbWVsaW5lT3B0aW9ucyBmcm9tICcuL25neC10d2l0dGVyLXRpbWVsaW5lLW9wdGlvbnMuaW50ZXJmYWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LXR3aXR0ZXItdGltZWxpbmUnLFxuICB0ZW1wbGF0ZTogYGBcbn0pXG5leHBvcnQgY2xhc3MgTmd4VHdpdHRlclRpbWVsaW5lQ29tcG9uZW50IHtcbi8qKlxuICAgKiBUaGUgZGF0YSBzb3VyY2UgZGVmaW5pdGlvbiBvYmplY3QgZm9yIHRoZSBjb250ZW50IHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgd2lkZ2V0LlxuICAgKiBNYXkgYmUgYSB3aWRnZXQgSUQgc3RyaW5nIGZvciBhIHNlYXJjaCBBUEkgdGltZWxpbmUgb3IgbGVnYWN5IHdpZGdldFxuICAgKi9cbiAgQElucHV0KCkgZGF0YTogTmd4VHdpdHRlclRpbWVsaW5lRGF0YTtcbiAgLyoqXG4gICAqIEEgaGFzaCBvZiBhZGRpdGlvbmFsIG9wdGlvbnMgdG8gY29uZmlndXJlIHRoZSB3aWRnZXRcbiAgICovXG4gIEBJbnB1dCgpIG9wdHM6IE5neFR3aXR0ZXJUaW1lbGluZU9wdGlvbnM7XG4gIGRlZmF1bHRPcHRzOiBOZ3hUd2l0dGVyVGltZWxpbmVPcHRpb25zID0ge1xuICAgIHR3ZWV0TGltaXQ6IDVcbiAgfTs7XG4gIGRlZmF1bHREYXRhOiBOZ3hUd2l0dGVyVGltZWxpbmVEYXRhID0ge1xuICAgIHNvdXJjZVR5cGU6ICd1cmwnLFxuICAgIHVybDogJ2h0dHBzOi8vdHdpdHRlci5jb20vdHdpdHRlcmRldicsXG4gICAgc2NyZWVuTmFtZTogJ3R3aXR0ZXJkZXYnXG4gIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgdHdpdHRlclRpbWVsaW5lU2VydmljZTogTmd4VHdpdHRlclRpbWVsaW5lU2VydmljZVxuICApIHsgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIGlmICh0aGlzLmRhdGEgJiYgdGhpcy5kYXRhLnNvdXJjZVR5cGUpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5kYXRhLnNvdXJjZVR5cGUpIHtcbiAgICAgICAgY2FzZSAndXJsJzpcbiAgICAgICAgICBkZWxldGUgdGhpcy5kZWZhdWx0RGF0YS5zY3JlZW5OYW1lO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwcm9maWxlJzpcbiAgICAgICAgICBkZWxldGUgdGhpcy5kZWZhdWx0RGF0YS51cmw7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB0aGlzLmxvYWRUd2l0dGVyV2lkZ2V0KCk7XG4gICAgfVxuICB9XG5cbiAgbG9hZFR3aXR0ZXJXaWRnZXQoKSB7XG4gICAgdGhpcy50d2l0dGVyVGltZWxpbmVTZXJ2aWNlXG4gICAgICAubG9hZFNjcmlwdCgpXG4gICAgICAuc3Vic2NyaWJlKFxuICAgICAgICB0d3R0ciA9PiB7XG4gICAgICAgICAgbGV0IG5hdGl2ZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICAgICAgICBuYXRpdmVFbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgICAgd2luZG93Wyd0d3R0ciddXG4gICAgICAgICAgICAud2lkZ2V0c1xuICAgICAgICAgICAgLmNyZWF0ZVRpbWVsaW5lKFxuICAgICAgICAgICAgICB7IC4uLnRoaXMuZGVmYXVsdERhdGEsIC4uLnRoaXMuZGF0YSB9LFxuICAgICAgICAgICAgICBuYXRpdmVFbGVtZW50LFxuICAgICAgICAgICAgICB7IC4uLnRoaXMuZGVmYXVsdE9wdHMsIC4uLnRoaXMub3B0cyB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgICAudGhlbihlbWJlZCA9PiB7XG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGVtYmVkKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcikpXG4gICAgICAgIH0sXG4gICAgICAgIGVyciA9PiBjb25zb2xlLmVycm9yKGVycikpO1xuICB9XG59XG4iXX0=