/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export class NgxTwitterTimelineService {
    constructor() {
        this.TWITTER_SCRIPT_ID = 'twitter-wjs';
        this.TWITTER_WIDGET_URL = 'https://platform.twitter.com/widgets.js';
    }
    /**
     * @return {?}
     */
    loadScript() {
        return Observable.create((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            this.startScriptLoad();
            window['twttr'].ready((/**
             * @param {?} twttr
             * @return {?}
             */
            (twttr) => {
                observer.next(twttr);
                observer.complete();
            }));
        }));
    }
    /**
     * @private
     * @return {?}
     */
    startScriptLoad() {
        window['twttr'] = ((/**
         * @param {?} d
         * @param {?} s
         * @param {?} id
         * @param {?} url
         * @return {?}
         */
        function (d, s, id, url) {
            /** @type {?} */
            let script;
            /** @type {?} */
            let firstScriptEl = d.getElementsByTagName(s)[0];
            /** @type {?} */
            let twitterScript = window['twttr'] || {};
            if (d.getElementById(id)) {
                return twitterScript;
            }
            script = d.createElement(s);
            script.id = id;
            script.src = url;
            firstScriptEl.parentNode.insertBefore(script, firstScriptEl);
            twitterScript._e = [];
            twitterScript.ready = (/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                twitterScript._e.push(f);
            });
            return twitterScript;
        })(document, 'script', this.TWITTER_SCRIPT_ID, this.TWITTER_WIDGET_URL));
    }
}
NgxTwitterTimelineService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgxTwitterTimelineService.ctorParameters = () => [];
/** @nocollapse */ NgxTwitterTimelineService.ngInjectableDef = i0.defineInjectable({ factory: function NgxTwitterTimelineService_Factory() { return new NgxTwitterTimelineService(); }, token: NgxTwitterTimelineService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxTwitterTimelineService.prototype.TWITTER_SCRIPT_ID;
    /**
     * @type {?}
     * @private
     */
    NgxTwitterTimelineService.prototype.TWITTER_WIDGET_URL;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXR3aXR0ZXItdGltZWxpbmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC10d2l0dGVyLXRpbWVsaW5lLyIsInNvdXJjZXMiOlsibGliL25neC10d2l0dGVyLXRpbWVsaW5lLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFLbEMsTUFBTSxPQUFPLHlCQUF5QjtJQUlwQztRQUhRLHNCQUFpQixHQUFHLGFBQWEsQ0FBQztRQUNsQyx1QkFBa0IsR0FBRyx5Q0FBeUMsQ0FBQztJQUV2RCxDQUFDOzs7O0lBRWpCLFVBQVU7UUFDUixPQUFPLFVBQVUsQ0FBQyxNQUFNOzs7O1FBQUMsUUFBUSxDQUFDLEVBQUU7WUFFbEMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBRXZCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLOzs7O1lBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDOUIsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDckIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3RCLENBQUMsRUFBQyxDQUFDO1FBRUwsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVPLGVBQWU7UUFDckIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7Ozs7Ozs7UUFBQSxVQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUc7O2dCQUVuQyxNQUFNOztnQkFDVixhQUFhLEdBQUcsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Z0JBQzVDLGFBQWEsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtZQUNyQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLEVBQUU7Z0JBQ3hCLE9BQU8sYUFBYSxDQUFDO2FBQ3RCO1lBRUQsTUFBTSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUIsTUFBTSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7WUFDZixNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUNqQixhQUFhLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFFN0QsYUFBYSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7WUFFdEIsYUFBYSxDQUFDLEtBQUs7Ozs7WUFBRyxVQUFTLENBQUM7Z0JBQzlCLGFBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNCLENBQUMsQ0FBQSxDQUFDO1lBRUYsT0FBTyxhQUFhLENBQUM7UUFDdkIsQ0FBQyxFQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7SUFDMUUsQ0FBQzs7O1lBN0NGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozs7Ozs7OztJQUVDLHNEQUEwQzs7Ozs7SUFDMUMsdURBQXVFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hUd2l0dGVyVGltZWxpbmVTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBUV0lUVEVSX1NDUklQVF9JRCA9ICd0d2l0dGVyLXdqcyc7XG4gIHByaXZhdGUgVFdJVFRFUl9XSURHRVRfVVJMID0gJ2h0dHBzOi8vcGxhdGZvcm0udHdpdHRlci5jb20vd2lkZ2V0cy5qcyc7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBsb2FkU2NyaXB0KCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKG9ic2VydmVyID0+IHtcblxuICAgICAgdGhpcy5zdGFydFNjcmlwdExvYWQoKTtcblxuICAgICAgd2luZG93Wyd0d3R0ciddLnJlYWR5KCh0d3R0cikgPT4ge1xuICAgICAgICBvYnNlcnZlci5uZXh0KHR3dHRyKTtcbiAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHN0YXJ0U2NyaXB0TG9hZCgpIHtcbiAgICB3aW5kb3dbJ3R3dHRyJ10gPSAoZnVuY3Rpb24oZCwgcywgaWQsIHVybClcbiAgICB7XG4gICAgICBsZXQgc2NyaXB0LFxuICAgICAgZmlyc3RTY3JpcHRFbCA9IGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0sXG4gICAgICB0d2l0dGVyU2NyaXB0ID0gd2luZG93Wyd0d3R0ciddIHx8IHt9O1xuICAgICAgaWYgKGQuZ2V0RWxlbWVudEJ5SWQoaWQpKSB7XG4gICAgICAgIHJldHVybiB0d2l0dGVyU2NyaXB0O1xuICAgICAgfVxuXG4gICAgICBzY3JpcHQgPSBkLmNyZWF0ZUVsZW1lbnQocyk7XG4gICAgICBzY3JpcHQuaWQgPSBpZDtcbiAgICAgIHNjcmlwdC5zcmMgPSB1cmw7XG4gICAgICBmaXJzdFNjcmlwdEVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNjcmlwdCwgZmlyc3RTY3JpcHRFbCk7XG5cbiAgICAgIHR3aXR0ZXJTY3JpcHQuX2UgPSBbXTtcblxuICAgICAgdHdpdHRlclNjcmlwdC5yZWFkeSA9IGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgdHdpdHRlclNjcmlwdC5fZS5wdXNoKGYpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHR3aXR0ZXJTY3JpcHQ7XG4gICAgfShkb2N1bWVudCwgJ3NjcmlwdCcsIHRoaXMuVFdJVFRFUl9TQ1JJUFRfSUQsIHRoaXMuVFdJVFRFUl9XSURHRVRfVVJMKSk7XG4gIH1cbn1cbiJdfQ==